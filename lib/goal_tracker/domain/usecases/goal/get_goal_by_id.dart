// ./lib/goal_tracker/domain/usecases/get_goal_by_id.dart
/*
  purpose:
    - Encapsulates the "Get Goal By ID" domain use case, responsible for fetching
      a specific [Goal] entity identified by its unique [id].
    - Provides a clean domain-level abstraction between UI/business logic and
      data persistence layers through [GoalRepository].

  usage:
    - Typically invoked when opening a Goal detail screen or editing an existing goal.
    - Returns null if no goal exists for the given [id].
    - Delegates data retrieval to [GoalRepository.getGoalById].

  compatibility guidance:
    - The [id] must be a valid unique identifier generated by the data source.
    - Do not perform UI-level error handling here â€” surface domain-level null results instead.
    - If additional identification schemes (e.g., composite keys) are added,
      update the domain entity and repository interface accordingly.
*/

import '../../entities/goal.dart';
import '../../repositories/goal_repository.dart';

/// Use case class responsible for fetching a single [Goal] by its [id].
///
/// Acts as an intermediary between the presentation layer and
/// repository, ensuring domain logic remains isolated from data details.
class GetGoalById {
  /// Repository abstraction handling persistence and retrieval.
  final GoalRepository repository;

  /// Constructs the use case with the required [GoalRepository] dependency.
  GetGoalById(this.repository);

  /// Executes the lookup operation asynchronously.
  ///
  /// Returns a [Goal] if found, or null if the specified [id] does not exist.
  /// The repository determines the exact lookup mechanism.
  Future<Goal?> call(String id) async => repository.getGoalById(id);
}
